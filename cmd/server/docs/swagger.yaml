definitions:
  domain.Buyer:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
    type: object
  domain.BuyerOrders:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      purchase_orders_count:
        type: integer
    type: object
  domain.BuyerRequest:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  domain.Carry:
    properties:
      address:
        type: string
      cid:
        type: string
      company_name:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      telephone:
        type: string
    type: object
  domain.Employee:
    properties:
      card_number_id:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      warehouse_id:
        type: integer
    type: object
  domain.InboundOrders:
    properties:
      employee_id:
        type: integer
      id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      product_batch_id:
        type: integer
      warehouse_id:
        type: integer
    type: object
  domain.Locality:
    properties:
      id:
        type: integer
      locality_name:
        type: string
      province_name:
        type: string
    type: object
  domain.LocalityCarriersReport:
    properties:
      carriers_count:
        type: integer
      locality_id:
        type: integer
      locality_name:
        type: string
    type: object
  domain.LocalityInput:
    properties:
      id:
        type: integer
      id_province:
        type: integer
      locality_name:
        type: string
    type: object
  domain.LocalityReport:
    properties:
      id_locality:
        type: integer
      locality_name:
        type: string
      sellers_count:
        type: integer
    type: object
  domain.Product:
    properties:
      description:
        type: string
      expiration_rate:
        type: number
      freezing_rate:
        type: number
      height:
        type: number
      id:
        type: integer
      length:
        type: number
      netweight:
        type: number
      product_code:
        type: string
      product_type_id:
        type: integer
      recommended_freezing_temperature:
        type: number
      seller_id:
        type: integer
      width:
        type: number
    type: object
  domain.ProductBatch:
    properties:
      batch_number:
        type: integer
      current_quantity:
        type: integer
      current_temperature:
        type: integer
      due_date:
        type: string
      id:
        type: integer
      initial_quantity:
        type: integer
      manufacturing_date:
        type: string
      manufacturing_hour:
        type: integer
      minimum_temperature:
        type: integer
      product_id:
        type: integer
      section_id:
        type: integer
    required:
    - batch_number
    - current_quantity
    - current_temperature
    - due_date
    - initial_quantity
    - manufacturing_date
    - manufacturing_hour
    - minimum_temperature
    - product_id
    - section_id
    type: object
  domain.ProductRecord:
    properties:
      id:
        type: integer
      last_update_date:
        type: string
      product_id:
        type: integer
      purchase_price:
        type: integer
      sale_price:
        type: integer
    type: object
  domain.ProductRecordReport:
    properties:
      description:
        type: string
      product_id:
        type: integer
      records_count:
        type: integer
    type: object
  domain.ProductRecordRequest:
    properties:
      last_update_date:
        type: string
      product_id:
        type: integer
      purchase_price:
        type: integer
      sale_price:
        type: integer
    type: object
  domain.PurchaseOrders:
    properties:
      buyer_id:
        type: integer
      id:
        type: integer
      order_date:
        type: string
      order_number:
        type: string
      order_status_id:
        type: integer
      product_record_id:
        type: integer
      tracking_code:
        type: string
    type: object
  domain.Section:
    properties:
      current_capacity:
        type: integer
      current_temperature:
        type: integer
      id:
        type: integer
      maximum_capacity:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: integer
      product_type_id:
        type: integer
      section_number:
        type: integer
      warehouse_id:
        type: integer
    type: object
  domain.Seller:
    properties:
      address:
        type: string
      cid:
        type: integer
      company_name:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      telephone:
        type: string
    type: object
  domain.Warehouse:
    properties:
      address:
        type: string
      id:
        type: integer
      locality_id:
        type: integer
      minimum_capacity:
        type: integer
      minimum_temperature:
        type: number
      telephone:
        type: string
      warehouse_code:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/buyers:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Buyer'
            type: array
      tags:
      - Buyers
    post:
      consumes:
      - application/json
      parameters:
      - description: Buyer Data
        in: body
        name: buyer
        required: true
        schema:
          $ref: '#/definitions/domain.BuyerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: int
      tags:
      - Buyers
  /api/v1/buyers/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ' '
          schema:
            type: string
      tags:
      - Buyers
    get:
      consumes:
      - application/json
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buyer'
      tags:
      - Buyers
    patch:
      consumes:
      - application/json
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Buyer Data
        in: body
        name: buyer
        required: true
        schema:
          $ref: '#/definitions/domain.BuyerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Buyer'
      tags:
      - Buyers
  /api/v1/buyers/reportPurchaseOrders/:
    get:
      description: Get the orders for all buyers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.BuyerOrders'
            type: array
        "204":
          description: No content
          schema:
            type: string
        "500":
          description: Error listing buyers
          schema:
            type: string
      summary: Get buyers orders
      tags:
      - Buyers
  /api/v1/buyers/reportPurchaseOrders/{id}:
    get:
      description: Get the orders for a specific buyer
      parameters:
      - description: Buyer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.BuyerOrders'
        "400":
          description: Invalid ID
          schema:
            type: string
        "404":
          description: Buyer not found
          schema:
            type: string
        "500":
          description: Error listing buyer
          schema:
            type: string
      summary: Get buyer orders
      tags:
      - Buyers
  /api/v1/carriers:
    post:
      consumes:
      - application/json
      description: Create Carriers
      parameters:
      - description: Carry Data
        in: body
        name: carry
        required: true
        schema:
          $ref: '#/definitions/domain.Carry'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Carry'
      summary: Create Carry
      tags:
      - Carriers
  /api/v1/carriers/{id}:
    get:
      consumes:
      - application/json
      description: List one by Carry id
      parameters:
      - description: Carry ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Carry'
      summary: Get Carry by ID
      tags:
      - Carriers
  /api/v1/employees:
    get:
      consumes:
      - application/json
      description: List all Employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Employee'
            type: array
      summary: Get all Employees
      tags:
      - Employees
    post:
      consumes:
      - application/json
      description: Create Employee
      parameters:
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.Employee'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Employee'
      summary: Create Employee
      tags:
      - Employees
  /api/v1/employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete Employee
      tags:
      - Employees
    get:
      consumes:
      - application/json
      description: List one by Employee id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Employee'
      summary: Get Employee by ID
      tags:
      - Employees
    patch:
      consumes:
      - application/json
      description: Update Employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Employee Data
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.Employee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Employee'
      summary: Update Employee
      tags:
      - Employees
  /api/v1/inboundOrders:
    post:
      consumes:
      - application/json
      description: Create Inbound Orders
      parameters:
      - description: Inbound Order Data
        in: body
        name: inboundOrder
        required: true
        schema:
          $ref: '#/definitions/domain.InboundOrders'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.InboundOrders'
      summary: Create Inbound Orders
      tags:
      - InboundOrders
  /api/v1/inboundOrders/{id}:
    get:
      consumes:
      - application/json
      description: List one by Inbound Order id
      parameters:
      - description: Inbound Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.InboundOrders'
      summary: Get Inbound Order by ID
      tags:
      - InboundOrders
  /api/v1/localities:
    post:
      consumes:
      - application/json
      description: Create a new locality with the provided data
      parameters:
      - description: Locality object to be created
        in: body
        name: locality
        required: true
        schema:
          $ref: '#/definitions/domain.Locality'
      produces:
      - application/json
      responses:
        "201":
          description: Locality created successfully
          schema:
            $ref: '#/definitions/domain.LocalityInput'
      tags:
      - Locality
  /api/v1/localities/report-sellers:
    get:
      consumes:
      - application/json
      description: Generates a report of sellers based on the provided locality ID
      parameters:
      - description: Locality ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Report of sellers by locality
          schema:
            items:
              $ref: '#/definitions/domain.LocalityReport'
            type: array
      tags:
      - Locality
  /api/v1/localities/reportCarries:
    get:
      consumes:
      - application/json
      description: List all Carriers of a Locality or All Localities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.LocalityCarriersReport'
            type: array
      summary: Read Carriers of a Locality
      tags:
      - Carriers
  /api/v1/productBatches:
    post:
      consumes:
      - application/json
      description: Save Product Batch
      parameters:
      - description: Product Batch
        in: body
        name: productBatch
        required: true
        schema:
          $ref: '#/definitions/domain.ProductBatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProductBatch'
      summary: Save Product Batch
      tags:
      - ProductBatch
  /api/v1/productRecords:
    post:
      consumes:
      - application/json
      description: Create ProductRecord
      parameters:
      - description: ProductRecord Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.ProductRecordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.ProductRecord'
      summary: Create ProductRecord
      tags:
      - ProductRecord
  /api/v1/products:
    get:
      consumes:
      - application/json
      description: List all Products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
      summary: Get All Products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create Product
      parameters:
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Product'
      summary: Create Product
      tags:
      - Products
  /api/v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete Product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: List one product by it's Product id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
      summary: Get Product by ID
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: Update Product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Product'
      summary: Update Product
      tags:
      - Products
  /api/v1/products/reportRecords:
    get:
      consumes:
      - application/json
      description: List product record reports of All Products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.ProductRecordReport'
            type: array
      summary: Get All product record reports
      tags:
      - ProductRecord
  /api/v1/products/reportRecords/{id}:
    get:
      consumes:
      - application/json
      description: List the product record report of one  product by it's Product
        id
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProductRecordReport'
      summary: Get Product Record Report by Product ID
      tags:
      - ProductRecord
  /api/v1/purchaseOrders:
    post:
      consumes:
      - application/json
      description: Create a new purchase order
      parameters:
      - description: Purchase Order Request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/domain.PurchaseOrders'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.PurchaseOrders'
        "400":
          description: Bad request
          schema:
            type: string
        "409":
          description: Conflict
          schema:
            type: string
        "422":
          description: Unprocessable entity
          schema:
            type: string
      summary: Create a new purchase order
      tags:
      - Purchase Orders
  /api/v1/sections:
    get:
      consumes:
      - application/json
      description: List All Sections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Section'
            type: array
      summary: Get All Sections
      tags:
      - Section
    post:
      consumes:
      - application/json
      description: Create Section
      parameters:
      - description: Section Data
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/domain.Section'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Section'
      summary: Create Section
      tags:
      - Section
  /api/v1/sections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Section
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete Section
      tags:
      - Section
    get:
      consumes:
      - application/json
      description: Describe by Section id
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Section'
      summary: Get Section by ID
      tags:
      - Section
    patch:
      consumes:
      - application/json
      description: Update Section
      parameters:
      - description: Section ID
        in: path
        name: id
        required: true
        type: integer
      - description: Section Data
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/domain.Section'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Section'
      summary: Update Section
      tags:
      - Section
  /api/v1/sections/reportProducts:
    get:
      consumes:
      - application/json
      description: Report Products by Section or All Sections
      parameters:
      - description: Section ID
        in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
      summary: Report Products by Section or All Sections
      tags:
      - Section
  /api/v1/sellers:
    get:
      consumes:
      - application/json
      description: List all Sellers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Seller'
            type: array
      summary: Get All Sellers
      tags:
      - Sellers
    post:
      consumes:
      - application/json
      description: Create Sellers
      parameters:
      - description: Seller Data
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/domain.Seller'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Seller'
      summary: Create Seller
      tags:
      - Sellers
  /api/v1/sellers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete Seller
      tags:
      - Sellers
    get:
      consumes:
      - application/json
      description: List one by Seller id
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Seller'
      summary: Get Seller by ID
      tags:
      - Sellers
    patch:
      consumes:
      - application/json
      description: Update Seller
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Seller Data
        in: body
        name: seller
        required: true
        schema:
          $ref: '#/definitions/domain.Seller'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Seller'
      summary: Update Seller
      tags:
      - Sellers
  /api/v1/warehouses:
    get:
      consumes:
      - application/json
      description: List all Warehouses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Warehouse'
            type: array
      summary: Get all Warehouses
      tags:
      - Warehouses
    post:
      consumes:
      - application/json
      description: Create Warehouses
      parameters:
      - description: Warehouse Data
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/domain.Warehouse'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/domain.Warehouse'
      summary: Create Warehouse
      tags:
      - Warehouses
  /api/v1/warehouses/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete Warehouse
      tags:
      - Warehouses
    get:
      consumes:
      - application/json
      description: List one by Warehouse id
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Warehouse'
      summary: Get Warehouse by ID
      tags:
      - Warehouses
    patch:
      consumes:
      - application/json
      description: Update Warehouse
      parameters:
      - description: Warehouse ID
        in: path
        name: id
        required: true
        type: integer
      - description: Warehouse Data
        in: body
        name: warehouse
        required: true
        schema:
          $ref: '#/definitions/domain.Warehouse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Warehouse'
      summary: Update Warehouse
      tags:
      - Warehouses
swagger: "2.0"
